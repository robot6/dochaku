ru russian ру русский
# The previous line introduces the file to the transliterator.  It contains a double and full
# name in both languages.

# Rules in this file start with hyphens.

# The grammar rules follow.
# Has subject-verb-object ordering
-svo
# Uses prepositions, not postpositions
-preposition

# The transliteration rules fallow.
#
# Transliteration occurs when a string of characters is encountered which is not represented
# in a file.  In this case, a transliterated identifier is created.  For example, in 
# Russian, "чуть" as an identifier would become "rchutyy", and "Чуть" would become
# "RCHutyy".  The "r" comes from the character set notation used below.
#
# Transliteration rules all start with -t and then something, and have parameters
# within braces.
#
# Transliteration rule 1: a set of capitals exists and is part of the regular set.
# Use -t0 to declare that we are using rule 1.
-t0 {1}
# The russian character set.  Include capitals.  
# Use -tr to declare that we are using Russian letters.  A single character indicates the
# character set.   For example, a Japanese set would use "h" for the hiragana set and 
# "k" for the katakana set.
-tr {а б в г д е ё ж з и й к л м н о п р с т у ф х ц ч ш щ ъ ы ь э ю я А Б В Г Д Е Ё Ж З И Й К Л М Н О П Р С Т У Ф Х Ц Ч Ш Щ Ъ Ы Ь Э Ю Я}
# The transliterated character set.  Capitals are included.  
# Note that doubles use characters (y and h) which are never used outside of doubles.
-tr {a b v g d ye yo zh z yi i k l m n o p r s t u f x th ch sh hh hy iy yy e yu ya A B V G D YE YO ZH Z YI I K L M N O P R S T U F X TH CH SH HH HY IY YY E YU YA}
# the 

# keywords.  All keywords are here.  If several aliases exist for
# one keyword, simply extend the enty.
BEGIN НАЧАЛО
END КОНЕЦ
__ENCODING__  __КОДИРОВКА__
__END__ __КОНЕЦ__
__FILE__ __ФАЙЛ__
__LINE__ __СТРОКА__
alias псевдоним
and и
begin начало
break останови
case случаи
class класс
def определи
defined? определен?
do делай
else иначе
elsif иначе_если
end конец
ensure гарантируй
false ложь
for для
if если
in из
module модуль
next дальше
nil ничто
not не
or или
redo переделай
rescue спаси
retry перепробуй
return возвращи
self сам
super верхний
then то
true истина
undef разопредели
unless еслине
until до
when когда
while пока
yield дай

# Names are items which are used by the code as symbols, such as classes and 
# methods.
-names
print напиши
puts выведи
p 　рассмотри
Array Массив
Enumerable Перечисление
String Строка
Object Объект
BasicObject ОсновнойОбъект
Kernel Ядро
main главное
new новый
attr_reader аттр_чтение
attr_accessor аттр_доступ
attr_writer аттр_запись
File Файл
IO ВводВывод
Hash Хэш
Class Класс
initialize инициируй
allocate выдели
superclass суперкласс
binread читайдвоичный
copystream скопируйвпоток
for_fd для_фд
foreach длякаждого
open открой
close закрой
pipe труба
popen процоткрой
read читай
readlines читайстроки
Float ДействительноеЧисло
Integer ЦелоеЧисло
Module Модуль
Regexp РегВыражение
Proc Проц
arity арность
binding скрепление
curry бей
lambda? лямбда?
hash хеш
source_location местоположение_кода
parameters параметры
to_proc в_проц
to_s встроку
call вызови
eql? равно?
select выбери
sysopen систоткрой
try_convert попробуй_преобразовать
BigNum БольшоеЧисло
